[{"content":"","date":"12 October 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"12 October 2024","externalUrl":null,"permalink":"/tags/distributed/","section":"Tags","summary":"","title":"Distributed","type":"tags"},{"content":"","date":"12 October 2024","externalUrl":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go","type":"tags"},{"content":"This is a monorepo containing code for microservices pertaining to an ecommerce webapp\nary82/microservices microservices pertaining to an ecommerce webapp Go 0 0 Installation # Ensure that you have Golang and Docker installed\nClone and cd into the repo\ngit clone https://github.com/ary82/microservices.git cd microservices Either start everything with docker compose\ndocker compose up -d # Navigate to http://localhost:8080 for GraphQL playground OR Only start the dependencies with docker\n# Start the dependencies docker compose -f ./docker-compose-dev.yml up -d # Copy the .env cp .env.example .env # Start each service make run-api make run-user make run-product make run-order # Navigate to http://localhost:8001 for GraphQL playground Description # This repo contains the following microservices with careful design practices. Their entrypoints are in cmd/ and their logic is in their independent directories in internal/. They use two common packages:\nmq(location: internal/mq), contains types needed for data exchange in Message Queues proto(location: internal/proto), contains .proto files and generated code for grpc 1. GraphQL API # This is the GraphQL API that will be exposed to the client, fetching and aggregating data from all three microservices. Uses grpc to interact with the three microservices to fetch and change data.\nSupports the following queries:\nquery { users { id username email type # 0 - DEFAULT, 1 - ADMIN } products { id name description price stock } orders { id user_id price_total quantity } } Single item queries can be made with id argument:\nquery { user(id: \u0026#34;ID_STRING\u0026#34;) { id username email type # 0 - DEFAULT, 1 - ADMIN } product(id: \u0026#34;ID_STRING\u0026#34;) { id name description price stock } order(id: \u0026#34;ID_STRING\u0026#34;) { id user_id price_total quantity order_products { product_id quantity price } } } Following mutations are possible:\nmutation { registerUser( input: { email: \u0026#34;EMAIL\u0026#34; username: \u0026#34;USERNAME\u0026#34; type: 0 # 0 - DEFAULT, 1 - ADMIN password: \u0026#34;PASSWORD\u0026#34; } ) { id email username type # 0 - DEFAULT, 1 - ADMIN } } mutation { login(input: { email: \u0026#34;EMAIL\u0026#34;, password: \u0026#34;PASSWORD\u0026#34; }) { token # JWT: put in Authorization Header } } # Only applicable when user is logged in mutation { placeOrder( input: { order_products: [{ product_id: \u0026#34;PRODUCTID\u0026#34;, quantity: 1 }] } ) { id user_id quantity price_total order_products { product_id price quantity } } } # Only applicable when user is logged in and userType = 1 mutation { createProduct( input: { name: \u0026#34;NAME\u0026#34;, description: \u0026#34;DESC\u0026#34;, price: 1, stock: 1 } ) { id price name description stock } } # Only applicable when user is logged in and userType = 1 mutation { # type: 0 - INVALID, 1 - ADD, 2 - SUBTRACT, 3 - DELETE updateInventory(input: { id: \u0026#34;ID\u0026#34;, type: 1, number: 1 }) { success } } 2. Users Service # Handles User registration and Authentication.\nContains the following Grpc methods:\nGetUser GetUsers Login RegisterUser Sends the following Events:\nUSER_REGISTERED Receives the following Events:\n- The code in this microservice is structured as:\nUserRepository: DB operations UserService: Logic UserDomainRpc: Implements the grpc server 3. Products Service # Handles products catalogue and Inventory.\nContains the following Grpc methods:\nGetProduct GetProducts AddProduct UpdateInventory Sends the following Events:\nPRODUCT_CREATED INVENTORY_UPDATE Receives the following Events:\nUSER_REGISTERED ORDER_PLACED The code in this microservice is structured as:\nProductRepository: DB operations ProductService: Logic ProductDomainRpc: Implements the grpc server EventConsumer: Consumes Events from other microservices 4. Orders Service # Handles order placing and fetching.\nContains the following Grpc methods:\nGetOrder GetOrders PlaceOrder Sends the following Events:\nORDER_PLACED Receives the following Events:\nUSER_REGISTERED PRODUCT_CREATED INVENTORY_UPDATE The code in this microservice is structured as:\nOrderRepository: DB operations OrderService: Logic OrderDomainRpc: Implements the grpc server EventConsumer: Consumes Events from other microservices Architecture # Here\u0026rsquo;s how everything interacts with each other:\nHere\u0026rsquo;s how the microservices interact with each other and with RabbitMQ:\n","date":"12 October 2024","externalUrl":null,"permalink":"/projects/microservices/","section":"Projects","summary":"Microservices pertaining to an ecommerce webapp","title":"Microservices","type":"projects"},{"content":"","date":"12 October 2024","externalUrl":null,"permalink":"/categories/project/","section":"Categories","summary":"","title":"Project","type":"categories"},{"content":"","date":"12 October 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"3 October 2024","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript","type":"tags"},{"content":"This chrome extension helps you to solve leetcode questions on your own by providing insightful questions according to the socratic teaching philosophy\nproject made for devfolio\u0026rsquo;s \u0026ldquo;GenAI Exchange Hackathon by Google 2024\u0026rdquo;\nary82/socratic-leetcode Helps you solve leetcode on your own Go 0 0 Installation # Download the package socratic-code.zip from Github Releases\nExtract it\n# USE unzip unzip socratic-code.zip # OR USING 7z 7z x socratic-code.zip Open chrome, go to chrome://extensions/ and enable developer mode\nClick on Load unpacked and navigate to the build folder you just extracted\nDescription # This project aims to create a reliable teaching assistant for Data Structures and Algorithms questions. The project is further narrowed down to create an assistant for Leetcode, which is the most popular website for interview and DSA prep. It is deployed as a Chrome Browser Extension.\nThis teaching assistant will never tell the user the answer completely, as it is based on the Socratic teaching method, in which the teacher asks insightful questions to guide the pupil towards the answer instead of telling them the answer.\nIn Scope # Creating a teaching assistant that guides the user towards figuring out a leetcode problem by themselves Accurate and reliable information Out of Scope # Solving the question or running the code that the user inputs is out of scope for this project Future Opportunities # Creating a problem database for easy identifification of the problem. This can be a simple KV with problem name-\u0026gt;problem description Creating a solution vector database for these problems, which can be used to give more context to the LLM and perform RAG(Retreival Augmented Generation) After implementing RAG, a point based system for monetizing the extension can be developed. Eg. User tops up 5000 coins. 10 coins can generate, say, 2 insightful questions for the given problem Challenges # Site Data Pipeline # It was quite hard to get the input data of the leetcode website. This is because chrome runs the content scripts of the extension in a secluded environment which doesnot have the the properties of the window element in the webpage.\nThe code editor input that leetcode uses is called monaco, and we can easily get the input data in correct formatting by entering window.monaco.editor.getModels()[0].getValue() in the leetcode website. But this was not the case for the extension, as it doesnot have the properties of window element.\nAlthough we can get the properties of this window element by using the \u0026quot;MAIN\u0026quot; WORLD in the content script, it is then not possible to send this data to the outside environment due to security reasons.\nThis was solved by identifying the correct elements and selecting them with document.querySelector()\nCI # Due to my inexperience with Continuous Integration, it took me quite a lot to set it up.\nThis includes:\nThe chrome extension CI, which is a github workflow to build the extension using pnpm and releasing it with github Releases The backend CI, which is a github workflow for publishing the backend service as a docker image on the ghcr registry, or Github\u0026rsquo;s docker registry Working # The following images represesnt the working of the extension\nArchitecture # ","date":"3 October 2024","externalUrl":null,"permalink":"/projects/socratic-code/","section":"Projects","summary":"Helps you solve leetcode on your own","title":"Socratic Code","type":"projects"},{"content":"","date":"3 October 2024","externalUrl":null,"permalink":"/tags/svelte/","section":"Tags","summary":"","title":"Svelte","type":"tags"},{"content":"","date":"22 August 2024","externalUrl":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"","date":"22 August 2024","externalUrl":null,"permalink":"/tags/graphics/","section":"Tags","summary":"","title":"Graphics","type":"tags"},{"content":"A simple raytracer written in C++\nThis project closely follows Ray Tracing in One Weekend\nary82/raytracer A raytracer written in C++ C\u0026#43;\u0026#43; 0 0 Why # Wanted to get a low level feel of raytracing and computer graphics in general.\nRun # Add your desired config in the main file and render the ppm image:\nmake run Convert your render to png version using ImageMagick\n./save-img.sh ","date":"22 August 2024","externalUrl":null,"permalink":"/projects/raytracer/","section":"Projects","summary":"A simple raytracer written in C++","title":"Raytracer","type":"projects"},{"content":"Pacman tui app made with bubbletea and other charm.sh libraries\nmade for trying out charmbracelet libraries and elm-like architectures\nary82/pacman single-level tui pacman game made with bubbletea Go 0 0 Run # You can either build and run the binary for the game:\nmake run-tui Or, build and run the ssh server for the game and ssh into it:\n# Using the script PORT=8080 make run-ssh # Or with docker docker run --rm -it -p 8080:8080 -e PORT=8080 ghcr.io/ary82/pacman:main # ssh into the game ssh ssh://0.0.0.0:8080 ","date":"12 July 2024","externalUrl":null,"permalink":"/projects/pacman/","section":"Projects","summary":"Single-level tui pacman game made with bubbletea","title":"Pacman","type":"projects"},{"content":"","date":"12 July 2024","externalUrl":null,"permalink":"/tags/tui/","section":"Tags","summary":"","title":"TUI","type":"tags"},{"content":"My place to write about stuff\n","date":"3 July 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"A place to write about my projects and the things I learnt while making them\n","date":"2 July 2024","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"","date":"30 June 2024","externalUrl":null,"permalink":"/","section":"home","summary":"","title":"home","type":"page"},{"content":"A website that can compliment and insult you, at the same time.\nHosted at: https://balance.ary82.dev\nary82/balance A website that can compliment and insult you, at the same time. Go 1 0 ","date":"26 June 2024","externalUrl":null,"permalink":"/projects/balance/","section":"Projects","summary":"A website that compliments and insults you at the same time","title":"Balance","type":"projects"},{"content":"","date":"26 June 2024","externalUrl":null,"permalink":"/tags/htmx/","section":"Tags","summary":"","title":"HTMX","type":"tags"},{"content":"","date":"26 June 2024","externalUrl":null,"permalink":"/tags/real-time/","section":"Tags","summary":"","title":"Real-Time","type":"tags"},{"content":"","date":"26 June 2024","externalUrl":null,"permalink":"/tags/sse/","section":"Tags","summary":"","title":"SSE","type":"tags"},{"content":"","date":"13 April 2024","externalUrl":null,"permalink":"/tags/algorithms/","section":"Tags","summary":"","title":"Algorithms","type":"tags"},{"content":"Huffbit is a command-line program written in Go that implements Huffman coding for data compression.\nary82/huffbit A huffman encoder/decoder written in Go Go 0 0 About # Huffman code is a type of optimal prefix code that supports lossless data compression by assigning variable length codes to the characters of a file. This algorithm assigns shorter codes to the most frequent characters, while comparatively uncommon characters receive larger codes, thus reducing file size optimally. This is accomplished by counting all the characters in a file, then constructing a Huffman Tree for assigning values to them. These codes are then written bit by bit to the output file. Features # Implements the classic Huffman coding algorithm. Supports compression and decompression of byte data. Leverages Go\u0026rsquo;s standard library packages for efficient file handling and data structures. Working # Take the input string \u0026ldquo;huffbit\u0026rdquo;:\nThis program makes the following Huffman tree:\nThe Codes for the characters are generated as:\nCharacter Code f 00 i 010 t 011 b 100 h 101 newline 110 u 111 After Writing the necessary headers, the encoded characters are written to the output file:\nAfter compression, the bytes needed get reduced from 8 in \u0026ldquo;huffbit\\n\u0026rdquo; to just 3 in the compressed file, making it a theoretical compression of 62%.\n","date":"13 April 2024","externalUrl":null,"permalink":"/projects/huffbit/","section":"Projects","summary":"Implementation of Huffman Algorithm in Go","title":"Huffbit","type":"projects"},{"content":"","date":"3 January 2024","externalUrl":null,"permalink":"/tags/express/","section":"Tags","summary":"","title":"Express","type":"tags"},{"content":"A Public Messaging app with quirks, written in JavaScript.\nHosted at: https://okaychat.ary82.dev\nQuirks # Effortlessly acknowledge messages with a single keystroke. Pressing Enter with an empty message automatically sends the text \"Ok\"! Click on Generate with AI to send an AI generated message based on the last five messages of your conversation Supports Multiple Logins from same Account Frontend # The Front end for this project is written in React, while utilising the features of various libraries such as:\nRedux toolkit for state management Axios for API requests TailwindCSS for Styling ary82/okay-client A real time messaging webapp JavaScript 0 0 Backend # The Back end For this project is written in JavaScript, while utilising:\nSocket.io library for instant messaging MongoDB database for storing users, and messages and WebSocket rooms Calls to Google Gemini for Automatic Message Generation PassportJS for implementing User Authentication ary82/okay-api Back end for a messaging webapp JavaScript 0 0 Architecture/hosting # Here is a schematic representation of the project, showing the technologies and platforms used for hosting it:\n","date":"3 January 2024","externalUrl":null,"permalink":"/projects/okaychat/","section":"Projects","summary":"Messaging webapp written in JS","title":"Okaychat","type":"projects"},{"content":"","date":"3 January 2024","externalUrl":null,"permalink":"/tags/react/","section":"Tags","summary":"","title":"React","type":"tags"},{"content":"","date":"3 January 2024","externalUrl":null,"permalink":"/tags/websockets/","section":"Tags","summary":"","title":"WebSockets","type":"tags"},{"content":"A Responsive, single-page web app made in ReactJS for the purpose of demonstrating the understanding of React topics such as its Components, useState and useEffects hooks, among other features.\nHosted at: https://ary82-memory-cards.vercel.app/\nary82/memory-cards Memory Card game JavaScript 0 0 ","date":"14 November 2023","externalUrl":null,"permalink":"/projects/memory-game/","section":"Projects","summary":"Memory card Game","title":"Memory Game","type":"projects"},{"content":"A to-do list website made for demonstrating understanding in Object Oriented concepts in JavaScript and the ability to use bundling systems like webpack for organisation of JavaScript code.\nHosted at: https://ary82.github.io/todo-list\nary82/todo-list Minimal Todo List written in vanilla JS JavaScript 0 0 Features # Organize Todos within Projects and view them using a variety of views Mark tasks as completed simply by clicking them. Persist data in local storage A Nice UI with theme switcher Functionality # Written in Vanilla JavaScript localStorage for storing todos Organized and packaged using Webpack ","date":"15 October 2023","externalUrl":null,"permalink":"/projects/todo-list/","section":"Projects","summary":"Todo-list written in vanilla JS","title":"Todo List","type":"projects"}]